" Automatic reloading of .vimrc
autocmd! bufwritepost .vimrc source %
set nocompatible              " be iMproved
filetype off                  " required!

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

"plugins

"Package management
Plugin 'tpope/vim-pathogen'
Plugin 'gmarik/vundle'

"status bar
Plugin 'bling/vim-airline'

"file browsers
Plugin 'kien/ctrlp.vim'
Plugin 'scrooloose/nerdtree'

"auto completion and syntax checking
Plugin 'Valloric/YouCompleteMe'
Plugin 'scrooloose/syntastic'

"navigation
Plugin 'Lokaltog/vim-easymotion'

"templates
Plugin 'aperezdc/vim-template'

"colors
Plugin 'flazz/vim-colorschemes'
Plugin 'Lokaltog/vim-distinguished'

"snippets
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'synzox/ultisnips-fortran'

"Comments
Plugin 'scrooloose/nerdcommenter'

"tab mappings
Plugin 'ervandew/supertab'

"format tables
Plugin 'godlygeek/tabular'

"pandoc
Plugin 'vim-pandoc/vim-pandoc'
Plugin 'vim-pandoc/vim-pandoc-syntax'

"latex
"Plugin 'vim-latex/vim-latex'

"git
Plugin 'airblade/vim-gitgutter'
Plugin 'tpope/vim-fugitive'

"tmux integration
Plugin 'edkolev/tmuxline.vim'

"surround plugin
Plugin 'tpope/vim-surround'

"around plugin
Plugin 'jiangmiao/auto-pairs'

"tagbar
Plugin 'majutsushi/tagbar'

"simple fold
Plugin 'tmhedberg/SimpylFold'

"gists plugin
Plugin 'mattn/webapi-vim'
Plugin 'mattn/gist-vim'

"neomake
Plugin 'benekastah/neomake'

"javascript
Plugin 'marijnh/tern_for_vim'

"vimtex
Plugin 'lervag/vimtex'

" Better copy & paste
" When you want to paste large blocks of code into vim, press F2 before you
" paste. At the bottom you should see ``-- INSERT (paste) --``.

set pastetoggle=<F2>
set clipboard=unnamed

" Mouse and backspace
set mouse=a  " on OSX press ALT and click
set bs=2     " make backspace behave like normal again

" I like to have it here becuase it is easier to reach than the default and
" it is next to ``m`` and ``n`` which I use for navigating between tabs.
let mapleader = ","


" Bind nohl
" Removes highlight of your last search
" ``<C>`` stands for ``CTRL`` and therefore ``<C-n>`` stands for ``CTRL+n``
noremap <C-n> :nohl<CR>
vnoremap <C-n> :nohl<CR>
inoremap <C-n> :nohl<CR>

" Quicksave command
noremap <C-Z> :update<CR>
vnoremap <C-Z> <C-C>:update<CR>
inoremap <C-Z> <C-O>:update<CR>

" Quick quit command
noremap <Leader>e :quit<CR>  " Quit current window
noremap <Leader>E :qa!<CR>   " Quit all windows

" bind Ctrl+<movement> keys to move around the windows, instead of using Ctrl+w + <movement>
" Every unnecessary keystroke that can be saved is good for your health :)
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h

" easier moving between tabs
map <Leader>n <esc>:tabprevious<CR>
map <Leader>m <esc>:tabnext<CR>

" map sort function to a key
vnoremap <Leader>s :sort<CR>

"toggle into normal mode from insert mode
"inoremap jk <Esc>

"remove all trailing whitespace
nnoremap <Leader>rtw :%s/\s\+$//e<CR>

"map ctrlp vim ctrlp to <c-p>
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

" easier moving of code blocks
" Try to go into visual mode (v), thenselect several lines of code here and
" then press ``>`` several times.
vnoremap < <gv  " better indentation
vnoremap > >gv  " better indentation

" Show whitespace
" MUST be inserted BEFORE the colorscheme command
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
au InsertLeave * match ExtraWhitespace /\s\+$/

" Color scheme
set t_Co=256
"color wombat256mod
color distinguished

" Enable syntax highlighting
" You need to reload this file for the change to apply
filetype plugin indent on
syntax on

" Showing line numbers and length linebreaking options
set number  " show line numbers
set colorcolumn=80
set wrap linebreak nolist
set rnu
set cursorline
hi CursorLineNr   term=bold ctermfg=Yellow gui=bold guifg=Yellow

highlight ColorColumn ctermbg=233

" Useful settings
set history=700
set undolevels=700

" Real programmers don't use TABs but spaces
set tabstop=2
set softtabstop=2
set shiftwidth=2
set shiftround
set expandtab

" Make search case insensitive
set hlsearch
set incsearch
set ignorecase
set smartcase

" Disable stupid backup and swap files - they trigger too many events
" for file system watchers
set nobackup
set nowritebackup
set noswapfile

call pathogen#infect()

" Settings for airline
set laststatus=2
set showtabline=2
set guioptions-=e

" Settings for ctrlp
let g:ctrlp_max_height = 30
set wildignore+=*.pyc
set wildignore+=*_build/*
set wildignore+=*/coverage/*

"YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>']
let g:ycm_key_list_previous_completion = ['<C-p>']
let g:SuperTabDefaultCompletionType = '<C-n>'

"" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<C-j>"
let g:UltiSnipsJumpForwardTrigger = "<C-j>"
let g:UltiSnipsJumpBackwardTrigger = "<C-k>"

" Toggle spell checking on and off with `,s`
nmap <silent> <leader>s :set spell!<CR>

" Set region to Australian English
set spelllang=en_au

"vimtex setup
" set textwidth for file type
au BufRead,BufNewFile *.tex setlocal textwidth=79
" set spell check for tex files
autocmd FileType tex setlocal spell
" vimtex setup
" autocomplete
if !exists('g:ycm_semantic_triggers')
  let g:ycm_semantic_triggers = {}
endif
let g:ycm_semantic_triggers.tex = [
      \ 're!\\[A-Za-z]*(ref|cite)[A-Za-z]*([^]]*])?{([^}]*, ?)*'
      \ ]
" use zathura for pdf viewer
let g:vimtex_view_method = 'zathura'

"Easy Motion search
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)

"Vim airline
" Enable vim-airline
let g:airline#extensions#tabline#enabled = 0
let g:airline_powerline_fonts = 0
let g:airline_theme='powerlineish'

"Syntastic Settings
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

"define html checkers
let g:syntastic_html_checkers = ['w3']
let g:syntastic_html_w3_api ='http://localhost/w3c-validator/check'

"define latex checker
let g:syntastic_tex_checkers = ['chktex']

"define python syntatsic checker
let g:syntastic_python_python_exe = 'python3'
let g:syntastic_python_checkers = ['pylint','flake8']

"turn off ycm syntax checking
let g:ycm_register_as_syntastic_checker = 0

"cpp
let g:syntastic_cpp_compiler = "g++"
let g:syntastic_cpp_compiler_options = "-std=c++11 -Wall -Wextra -Wpedantic"
let g:syntastic_cpp_include_dirs = ['inc']
let g:syntastic_c_check_header = 1
let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
let g:ycm_add_preview_to_completeopt = 1
let g:ycm_autoclose_preview_window_after_completion = 1

"map pandoc files for markdown syntax checking
let g:syntastic_filetype_map = { "pandoc": "markdown" }

"javascript
let g:syntastic_javascript_checkers = ['jshint']

"map taglist togle to <leader-t>
map <Leader>t <esc>:TagbarToggle<CR>

"map remove trailing whitespace
nnoremap <silent> <Leader>rtw :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>


"map insert breakpoint to <leader> b
au FileType python map <silent> <leader>b oimport ipdb; ipdb.set_trace()<esc>
au FileType python map <silent> <leader>B Oimport ipdb; ipdb.set_trace()<esc>

highlight Normal ctermbg=none

"disable arrow keys
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>
vnoremap <up> <nop>
vnoremap <down> <nop>
vnoremap <left> <nop>
vnoremap <right> <nop>

"gista setup

let g:gista#github_user = 'sciff90'
  if !exists('g:airline_symbols')
    let g:airline_symbols = {}
  endif

" unicode symbols
let g:airline_left_sep = ''
"let g:airline_left_sep = '¬ª'
"let g:airline_left_sep = '‚ñ∂'
let g:airline_right_sep = ''
"let g:airline_right_sep = '¬´'
"let g:airline_right_sep = '‚óÄ'
"let g:airline_symbols.crypt = 'üîí'
"let g:airline_symbols.linenr = '‚êä'
"let g:airline_symbols.linenr = '‚ê§'
"let g:airline_symbols.linenr = '¬∂'
"let g:airline_symbols.branch = '‚éá'
"let g:airline_symbols.paste = 'œÅ'
"let g:airline_symbols.paste = '√û'
"let g:airline_symbols.paste = '‚à•'
"let g:airline_symbols.whitespace = 'Œû'
" powerline symbols
"let g:airline_left_sep = 'ÓÇ∞'
"let g:airline_left_alt_sep = 'ÓÇ±'
"let g:airline_right_sep = 'ÓÇ≤'
"let g:airline_right_alt_sep = 'ÓÇ≥'
let g:airline_symbols.branch = 'ÓÇ†'
let g:airline_symbols.readonly = 'ÓÇ¢'
let g:airline_symbols.linenr = 'ÓÇ°'
let tmuxline_powerline_separators=0
