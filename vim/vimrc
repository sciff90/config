
"plugins
call plug#begin('~/.vim/plugged')

" vim sensible
Plug 'tpope/vim-sensible'

" vim commentary
Plug 'tpope/vim-commentary'

"status bar
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

"file browsers
Plug 'ctrlpvim/ctrlp.vim'

"auto completion and syntax checking
Plug 'Shougo/neocomplete.vim'
Plug 'davidhalter/jedi-vim'

"navigation
Plug 'Lokaltog/vim-easymotion'

"colors
Plug 'flazz/vim-colorschemes'
Plug 'Lokaltog/vim-distinguished'

"snippets
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'synzox/ultisnips-fortran'

"format tables
Plug 'godlygeek/tabular'

"git
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'

"tmux integration
Plug 'edkolev/tmuxline.vim'

"surround plugin
Plug 'tpope/vim-surround'

"around plugin
Plug 'jiangmiao/auto-pairs'

"simple fold
Plug 'tmhedberg/SimpylFold'

"vimtex
Plug 'lervag/vimtex'

"syntastic
Plug 'scrooloose/syntastic' | Plug 'Rip-Rip/clang_complete'

call plug#end()

" better copy & paste
set pastetoggle=<F2>
set clipboard=unnamed

" mouse and backspace
set bs=2     " make backspace behave like normal again

" map leader key
let mapleader = ","


" quicksave command
noremap <C-Z> :update<CR>
vnoremap <C-Z> <C-C>:update<CR>
inoremap <C-Z> <C-O>:update<CR>


" bind ctrl+<movement> keys to move around the windows, instead of using ctrl+w + <movement>
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h

"remove all trailing whitespace
nnoremap <Leader>rtw :%s/\s\+$//e<CR>

"map ctrlp vim ctrlp to <c-p>
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

" easier moving of code blocks
vnoremap < <gv  " better indentation
vnoremap > >gv  " better indentation

" show whitespace
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
au InsertLeave * match ExtraWhitespace /\s\+$/

" color scheme
set t_Co=256
color distinguished

" enable syntax highlighting
filetype plugin indent on
set omnifunc=syntaxcomplete#Complete
let g:neocomplete#enable_at_startup = 1
syntax on

" showing line numbers and length linebreaking options
set number  " show line numbers
set colorcolumn=80
set wrap linebreak nolist
set rnu
set cursorline
hi CursorLineNr   term=bold ctermfg=Yellow gui=bold guifg=Yellow

highlight ColorColumn ctermbg=233

" useful settings
set history=700
set undolevels=700

" real programmers don't use tabs but spaces
set tabstop=2
set softtabstop=2
set shiftwidth=2
set shiftround
set expandtab

" make search case insensitive
set hlsearch
set incsearch
set ignorecase
set smartcase

" disable stupid backup and swap files
set nobackup
set nowritebackup
set noswapfile

" Settings for airline
set laststatus=2
set showtabline=2
set guioptions-=e

" settings for ctrlp
let g:ctrlp_max_height = 30
set wildignore+=*.pyc
set wildignore+=*_build/*
set wildignore+=*/coverage/*

"" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<C-j>"
let g:UltiSnipsJumpForwardTrigger = "<C-j>"
let g:UltiSnipsJumpBackwardTrigger = "<C-k>"

" toggle spell checking on and off with `,s`
nmap <silent> <leader>s :set spell!<CR>

" set region to australian english
set spelllang=en_au

" vimtex setup
" set textwidth for file type
au BufRead,BufNewFile *.tex setlocal textwidth=79
" set spell check for tex files
autocmd FileType tex setlocal spell
" vimtex setup
" autocomplete
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
let g:neocomplete#sources#omni#input_patterns.tex =
      \ '\v\\%('
      \ . '\a*cite\a*%(\s*\[[^]]*\]){0,2}\s*\{[^}]*'
      \ . '|\a*ref%(\s*\{[^}]*|range\s*\{[^,}]*%(\{\})?)'
      \ . '|includegraphics\*?%(\s*\[[^]]*\]){0,2}\s*\{[^}]*'
      \ . '|%(include%(only)?|input)\s*\{[^}]*'
      \ . ')'

" use zathura for pdf viewer
let g:vimtex_view_method = 'zathura'

" enable folding vimtex
let g:vimtex_fold_enabled = 1
let g:vimtex_fold_manual = 1
let g:vimtex_complete_recursive_bib = 1

"easy motion search
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)

"vim airline
" Enable vim-airline
let g:airline#extensions#tabline#enabled = 0
let g:airline_powerline_fonts = 0
let g:airline_theme='powerlineish'
"let g:airline_theme='wombat'
"let g:airline_theme='distinguished'

"map insert breakpoint to <leader> b
au FileType python map <silent> <leader>b oimport ipdb; ipdb.set_trace()<esc>
au FileType python map <silent> <leader>B Oimport ipdb; ipdb.set_trace()<esc>


"disable arrow keys
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>
vnoremap <up> <nop>
vnoremap <down> <nop>
vnoremap <left> <nop>
vnoremap <right> <nop>


" unicode symbols
let g:airline_symbols = {}
let g:airline_left_sep = ''
"let g:airline_left_sep = '»'
"let g:airline_left_sep = '▶'
let g:airline_right_sep = ''
"let g:airline_right_sep = '«'
"let g:airline_right_sep = '◀'
"let g:airline_symbols.crypt = '🔒'
"let g:airline_symbols.linenr = '␊'
"let g:airline_symbols.linenr = '␤'
"let g:airline_symbols.linenr = '¶'
"let g:airline_symbols.branch = '⎇'
"let g:airline_symbols.paste = 'ρ'
"let g:airline_symbols.paste = 'Þ'
"let g:airline_symbols.paste = '∥'
"let g:airline_symbols.whitespace = 'Ξ'
" powerline symbols
"let g:airline_left_sep = ''
"let g:airline_left_alt_sep = ''
"let g:airline_right_sep = ''
"let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''
let tmuxline_powerline_separators=0
" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
"autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
filetype plugin indent on
syntax enable
let g:neocomplete#enable_at_startup = 1

autocmd FileType python setlocal omnifunc=jedi#completions
  let g:jedi#completions_enabled = 0
  let g:jedi#auto_vim_configuration = 0
  let g:jedi#smart_auto_mappings = 0
  if !exists('g:neocomplete#force_omni_input_patterns')
        let g:neocomplete#force_omni_input_patterns = {}
  endif
  let g:neocomplete#force_omni_input_patterns.python = '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
autocmd FileType python setlocal completeopt-=preview
highlight Normal ctermbg=none

" syntastic setup

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" c++ completion
if !exists('g:neocomplete#force_omni_input_patterns')
	  let g:neocomplete#force_omni_input_patterns = {}
endif
let g:neocomplete#force_omni_input_patterns.c =
			\ '[^.[:digit:] *\t]\%(\.\|->\)\w*'
let g:neocomplete#force_omni_input_patterns.cpp =
			\ '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'
let g:neocomplete#force_omni_input_patterns.objc =
			\ '\[\h\w*\s\h\?\|\h\w*\%(\.\|->\)'
let g:neocomplete#force_omni_input_patterns.objcpp =
			\ '\[\h\w*\s\h\?\|\h\w*\%(\.\|->\)\|\h\w*::\w*'
let g:clang_complete_auto = 0
let g:clang_auto_select = 0
let g:clang_omnicppcomplete_compliance = 0
let g:clang_make_default_keymappings = 0
"let g:clang_use_library = 1
autocmd CompleteDone * pclose
